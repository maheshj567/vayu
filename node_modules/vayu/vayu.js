var Vayu = function () {
	
    var passport = require('passport'),
        FacebookStrategy = require('passport-facebook').Strategy,
        mongoose = require('mongoose');
    
    var fb_cb_success = "";
    var fb_cb_error = "";
    
    var _user;
    var _board;
    var _card;
    var _vtodo;

    var _app;
    
    passport.serializeUser(function (user, done) {
        done(null, user._id);
    });

    passport.deserializeUser(function (id, done) {
        _user.findByID(id, function (doc) {
            done(null, doc);
        }, function (err) {
            done(err);
        });
    });
    
    function init(app)
    {
        _app = app;
        
        //initialize models
        _user = require('./models/User.js');
        _board = require('./models/Board.js');
        _card = require('./models/Card.js');
        _vtodo = require('./models/VTodo.js');

        setupRoutes();
    }

    var setupRoutes = function() {
        passport.use(new FacebookStrategy({
            clientID: _app.get('conf').get('VAYU_FB_APP_ID'),
            clientSecret: _app.get('conf').get('VAYU_FB_APP_SECRET'),
            callbackURL: _app.get('conf').get('VAYU_FB_CALLBACK')
        }, addOrGetUser));
        
        mongoose.connect(_app.get('conf').get('OPENSHIFT_MONGODB_DB_URL') || _app.get('conf').get('VAYU_DB'));

        //not sure if this is the best way to do tp integrations
        var tpConfig = {
            gaToken: _app.get('conf').get('VAYU_GA_TOKEN'),
            gaDomain: _app.get('conf').get('VAYU_GA_DOMAIN'),
            pingdomID: _app.get('conf').get('VAYU_PINGDOM_ID')
        }
        
        //routes
        _app.get("/connect/fb/cb", passport.authenticate('facebook', {
            successRedirect: "/me",
            failureRedirect: "/error.html"
        }));
        
        _app.get("/connect/fb", passport.authenticate('facebook', {
            scope: ['email']
        }));

        _app.get("/slack", function(req, res) {
            res.json({code: "OK"});
        });

        _app.post("/slack", function(req, res) {
            console.log(req.body);
            console.log(req.params);
            res.json({code: "OK"});
        });

        _app.get("/", function(req, res){
            res.render('index', {
                title: 'Get things done!',
                tpConfig: tpConfig
            });
        });
        
        _app.get("/me", function(req, res){
            //FIXME: not enough to just check user
            if(req.user)
            {
                res.render('me', {
                    title: req.user.f,
                    tpConfig: tpConfig
                });
            }else{
                res.redirect("/");
            }
        });

        _app.get("/boards", boardsGetHandler);
        _app.post("/boards", boardsPostHandler);
        _app.put("/boards", boardsPutHandler);

        _app.get("/cards", cardsGetHandler);
        _app.post("/cards", cardsPostHandler);
        _app.put("/cards/:id", cardsPutHandler);
        _app.delete("/cards/:id", cardsDeleteHandler);

        _app.get("/vtodos", vtodosGetHandler);
        _app.post("/vtodos", vtodosPostHandler);
        _app.put("/vtodos/:id", vtodosPutHandler);
        _app.delete("/vtodos/:id", vtodosDeleteHandler);

        _app.get("/reset", resetGetHandler);
    }
    
    // routes handlers
    var addOrGetUser = function (accessToken, refreshToken, profile, done) {
        _user.findOrRegisterFB(accessToken, refreshToken, profile._json, function (doc) {
            done(null, doc);
        }, function (err) {
            //TODO: different responses based on error!
            done(err);
        });
    };

    var boardsGetHandler = function (req, res) {
        getBoards(req.user._id, function (boards) {
            res.json(boards);
        }, function (err) {
            res.send(500);
        });
    }

    var boardsPostHandler = function(req, res) {
        addBoard(req.user._id, req.body.lid, req.body.name, function(board) {
            res.json(board);
        }, function(err) {
            res.send(500);
        });
    }

    var boardsPutHandler = function(req, res) {
        // TODO: really needed to create separate array?
        var c = [];
        var cards = req.body.cards;
        var len = cards.length;

        for (var i=0; i < len; i++) {
            c.push(cards[i]);
        }

        updateBoard(req.user._id, req.body._id, req.body.lid, req.body.name, c, function() {
            //NOTE: some backbonejs thing here...expects a "200" response as string
            res.send(200, "200");
        }, function(err) {
            res.send(500);
        });
    }

    var cardsGetHandler = function (req, res) {
        getCards(req.user._id, req.query.bid, function (cards) {
            res.json(cards);
        }, function (err) {
            res.send(500);
        });
    }

    var cardsPostHandler = function(req, res) {
        addCard(req.user._id, req.body.bid, req.body.lid, req.body.name, function(card) {
            res.json(card);
        }, function(err) {
            res.send(500);
        });
    }

    var cardsPutHandler = function(req, res) {
        var t = [];
        var vtodos = req.body.vtodos;
        var len = vtodos.length;

        for (var i=0; i < len; i++) {
            t.push(vtodos[i]);
        }

        updateCard(req.user._id, req.body._id, req.body.lid, req.body.name, t, function() {
            res.send(200, "200");
        }, function(err) {
            res.send(500);
        });
    }

    var cardsDeleteHandler = function(req, res) {
        archiveCard(req.user._id, req.params.id, function(card) {
            res.json(200, "200");
        }, function(err) {
            res.send(500);
        });
    }

    var vtodosGetHandler = function (req, res) {
        getVtodos(req.user._id, req.query.bid, function (vtodos) {
            res.json(vtodos);
        }, function (err) {
            res.send(500);
        });
    }

    var vtodosPostHandler = function(req, res) {
        addVtodo(req.user._id, req.body.bid, req.body.cid, req.body.lid, req.body.title, function(vtodo) {
            res.json(vtodo);
        }, function(err) {
            res.send(500);
        });
    }

    var vtodosPutHandler = function(req, res) {
        var done = req.body.done ? 1 : 0;
        
        updateVtodo(req.user._id, req.body._id, req.body.lid, req.body.title, done, function() {
            res.send(200, "200");
        }, function(err) {
            res.send(500, err);
        });
    }

    var vtodosDeleteHandler = function(req, res) {
        deleteVtodo(req.user._id, req.params.id, function() {
            res.send(200, "200");
        }, function(err) {
            res.send(500, err);
        });
    }

    var resetGetHandler = function (req, res) {
        deleteAllData(req.user._id, function() {
            res.redirect(req.headers.referer);
        }, function(err) {
            res.send(500);
        })
    }

    // model interactions
    // TODO: move to controllers
    var getBoards = function (userId, success, fail) {
        //TODO: segreate based on date range
        _board.getBoards(userId, success, fail);
    };

    var addBoard = function(userId, lid, name, success, fail) {
        _board.addBoard(userId, lid, name, success, fail);
    }

    var updateBoard = function(userId, id, lid, name, cards, success, fail) {
        _board.updateBoard(userId, id, lid, name, cards, success, fail);
    }

    var getCards = function (userId, bid, success, fail) {
        _card.getCards(userId, bid, success, fail);
    };

    var addCard = function(userId, bid, lid, name, success, fail) {
        _card.addCard(userId, bid, lid, name, success, fail);
    }

    var updateCard = function(userId, id, lid, name, vtodos, success, fail) {
        _card.updateCard(userId, id, lid, name, vtodos, success, fail);
    }

    var deleteCard = function(userId, id, success, fail) {
        _card.deleteCard(userId, id, success, fail);
    }

    var archiveCard = function(userId, id, success, fail) {
        _card.archiveCard(userId, id, success, fail);
    }

    var getVtodos = function (userId, bid, success, fail) {
        _vtodo.getVtodos(userId, bid, success, fail);
    };

    var addVtodo = function(userId, bid, cid, lid, title, success, fail) {
        _vtodo.addVtodo(userId, bid, cid, lid, title, success, fail);
    }

    var updateVtodo = function(userId, id, lid, title, done, success, fail) {
        _vtodo.updateVtodo(userId, id, lid, title, done, success, fail);
    }

    var deleteVtodo = function(userId, id, success, fail) {
        _vtodo.deleteVtodo(userId, id, success, fail);
    }

    var deleteAllData = function(userId, success, fail) {
        _board.deleteAll(userId, function() {
            _card.deleteAll(userId, function(){
                _vtodo.deleteAll(userId, success, fail);
            }, fail);
        }, fail);
    }
    
    return {
        init: init
    };
};

exports = module.exports = Vayu();