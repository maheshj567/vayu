var util = require('util')
    , VMB = require('./VayuModelBase.js')
    , moment = require('moment');

function Board()
{
    VMB.call(this);
}

util.inherits(Board, VMB);

var p = Board.prototype;

p.getBoards = function (userId, success, fail)
{
    this.Model.find({u: userId}, function (err, doc) {
        if (err) {
            fail(err);
        } else {
            success(doc);
        }
    });
    /*this.Model.find({ v: { $in: visibility }, $or: [{ u: personId }, { t: personId}] }, null, { sort: { cd: -1} }).populate('c.u').populate('t').populate('u').exec(function (err, mems)
    {
        if (err)
        {
            fail(err)
        } else
        {
            var len = mems.length;
            var date;
            var mem;
            var coms;
            var clen;
            var com;

            for (var i = 0; i < len; i++)
            {
                mem = mems[i];
                date = moment(mem.cd).fromNow();
                if (date.indexOf("seconds") == -1 && date.indexOf("minutes") == -1)
                {
                    date = moment(mem.cd).format("DD, MMM 'YY @ h:mm A");
                }
                mem.cddisp = date;

                coms = mem.c;
                clen = coms.length;

                for (var j = 0; j < clen; j++)
                {
                    com = coms[j];
                    date = moment(com.cd).fromNow();
                    if (date.indexOf("seconds") == -1 && date.indexOf("minutes") == -1)
                    {
                        date = moment(com.cd).format("DD, MMM 'YY @ h:mm A");
                    }
                    com.cddisp = date;
                }

            }
            success(mems);
        }
    }); */
}

p.addBoard = function (userId, lid, name, success, fail)
{

    //TODO: handle multiple persons
    var b = new this.Model({
        lid: lid,
        u: userId,
        n: name
    });
    this.saveModel(b, success, fail);
}

p.updateBoard = function(userId, id, lid, name, cards, success, fail) {
    this.Model.findOne({ u: userId, _id: id }, function (err, doc) {
        console.log("found doc...")
        console.log(doc.n);
    });

    this.Model.update({
        u: userId,
        _id: id
    }, {
        id: lid,
        n: name,
        cards: cards
    }, function(err, numAff, response) {
        if(err) {
            fail(err);
        } else {
            // update only one word
            //TODO: error tracking
            console.log("affectd - " + numAff)
            if(numAff == 1) {
                success();
            }else{
                console.log("error saving board...");
                console.log(err);
                fail(err);
            }
        }
    });
}

/*p.addComment = function (userId, memoryId, msg, success, fail)
{
    var root = this;
    var m = this.findByID(memoryId, function (doc)
    {
        doc.c.push({u:userId, m:msg});
        root.saveModel(doc, success, fail);
    }, fail);
}*/

var board = new Board();

board.init('Board', 'board', {
    //id from frontend (local)
    lid: String,
    //user id
    u: { type: board.Schema.ObjectId, ref: "User" },
    //name
    n: String,
    //cards
    //TODO: shorten the name
    cards: [],
    //created date
    cd: { "type": Date, "default": Date.now },
    //date for displaying on the frontend
    //cards
    // c: [{ type: mem.Schema.ObjectId, ref: "Card" }]
});

module.exports = exports = board;